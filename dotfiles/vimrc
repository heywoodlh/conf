if has("nvim")
  " Neovim specific blacklist go here
  let g:pathogen_blacklist = [ 'glow' ]
  if exists('g:started_by_firenvim')
    " Append to the blacklist when starting firenvim
    let g:pathogen_blacklist += [ 'airline', 'airline-themes' ]
  endif 
else
  " Vim specific blacklist go here
  let g:pathogen_blacklist = [ 'firenvim' ]
endif

execute pathogen#infect()
" Nvim vs vim config changes *after* Pathogen plugins has been loaded
if has("nvim")
  " Neovim specific config goes here
  " Firenvim specific config
  if exists('g:started_by_firenvim')
    " Disable firenvim by default
    let g:firenvim_config = {
        \ 'globalSettings': {
            \ 'alt': 'all',
        \  },
        \ 'localSettings': {
            \ '.*': {
                \ 'cmdline': 'neovim',
                \ 'content': 'html',
                \ 'selector': '#tinymce',
                \ 'takeover': 'never',
            \ },
        \ }
    \ }
    " Ctrl+Shift+v to paste from system clipboard
    nnoremap <C-S-v> "+p
    " Disable airline
    let g:airline#extensions#tabline#enabled = 0
    " Settings that are always applied for a minimal UI.
    set showtabline=1
    set shortmess+=F
    set colorcolumn=0
    set textwidth=200
    set noruler
    let g:ale_enabled = 0
    " Settings that are used by default for a minimal UI, but get overridden if
    " the window size is sufficient (see below).
    set cmdheight=1
    set laststatus=0
    set showmode
    set nocursorline
    set nonumber
    
    function! s:OnFirenvimIframeLoad() abort
      if &lines >= 10
        set laststatus=2
        set cmdheight=2
        set noshowmode
        set cursorline
        if &columns >= 10
          set number
        endif
      endif
      " Get rid of the annoying message at the bottom about the new file being
      " written, and then start insert mode.
      call feedkeys("\<C-L>", 'n')
    endfunction
  endif
else
  " Vim specific config goes here
    " Start term only if height is greater than or equal to 35 rows
  if winheight(0) >= 35
  	set termwinsize=10x0
  	set confirm
  	set splitbelow
  "	term ++kill=term
  end
endif


syntax on

colorscheme nord

filetype plugin indent on
let g:mapleader = "\<Space>"
let g:maplocalleader = ','
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>
map <C-n> :NERDTreeToggle<CR>

set number

" Start Nerdtree only if width is greater than or equal to 80 columns
"if winwidth(0) >= 100
"	let g:NERDTreeWinSize=winwidth(0)/6
"	autocmd VimEnter * NERDTree | wincmd p	
"endif


" Vim-indentline config
let g:indentLine_char = 'â¦™'
set shiftwidth=4
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0

" Syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

function! SyntasticCheckHook(errors)
    if !empty(a:errors)
        let g:syntastic_loc_list_height = min([len(a:errors), 10])
    endif
endfunction

" Custom keybinds
nnoremap zz :wa <bar> :qa!<CR>
nnoremap zq <bar> :qa!<CR>
map <silent> <C-y> :w! ~/tmp/vimbuf <CR>:silent !get-content ~/tmp/vimbuf <Bar> set-clipboard<CR>:redraw!<CR>
map <silent> <C-t> :term ++kill=term<CR>
map <silent> <C-o> :FZF $HOME<CR>
map <silent> <C-l> :set invnumber<CR>

"" Vim-markdown-preview toggle
nnoremap mdp :Glow<CR>

command NoComments %s/#.*\n//g
command GitAdd :w! <bar> !git add -v %
command GitCommit !$gitmessage = ($gitmessage = read-host -prompt "commit message") && git commit -s -m ${gitmessage}
command GitPush !gpsup

nnoremap ga :GitAdd<CR>
nnoremap gc :GitCommit<CR>
nnoremap gp :GitPush<CR>
nnoremap nc :NoComments<CR>

" GPG encrypted file handling
" Don't save backups of *.gpg files
set backupskip+=*.gpg
" To avoid that parts of the file is saved to .viminfo when yanking or
" deleting, empty the 'viminfo' option.
set viminfo=

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --quiet --decrypt --default-recipient-self" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END

" Folding
set foldmethod=syntax
set foldlevel=99

" Show matching characters like paranthesis, brackets, etc.
set showmatch

" tell vim to keep a backup file
set backup
" tell vim where to put its backup files
set backupdir=~/tmp
" tell vim where to put swap files
set dir=~/tmp

" Cursor settings:

"  1 -> blinking block
"  2 -> solid block 
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" back to line cursor when in normal mode
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[5 q" "SR = REPLACE mode
let &t_EI.="\e[5 q" "EI = NORMAL mode (ELSE)

" If pwsh executable is in $PATH
if executable('pwsh')
    if has("win64") || has("win32") || has("win16")
        set shell=cmd.exe
        set shellcmdflag=/c\ pwsh.exe\ -NoLogo
        set shellpipe=|
        set shellredir=>
    endif
endif

" Windows specific stuff
if has("win64") || has("win32") || has("win16")
    let g:gitgutter_git_executable = 'C:\Program Files\Git\cmd\git.exe'
endif
